// 2. 표현식과 연산자

// 2.1 객체와 배열 초기화 표현식
// 객체와 배열의 초기화 표현식(initializer)은 그 값이 새로 생성된 객체나 배열인 표현식이다.
// 이런 초기화 표현식을 객체 리터럴이나 배열 리터럴이라고 부르기도 한다. 하지만 리터릴과 달리 초기화 표현식은 프로퍼티와 요소 값을 지정하는 다양한 하위 표현식으로 구성되므로 기본 표현식은 아니다.

// 배열의 초기화 표현식은 대괄호 안에 콤마(,)로 구분된 리스트를 쓰는 형태의 표현식이다.
// 배열 초기화 표현식의 값은 새로 생성된 배열이다.
let array = [];

// 객체 초기화 표현식은 배열 초기화 표현식과 비슷하지만, 대괄호 대신 중괄호를 쓰고 각 하위 표현식은 프로퍼티 이름과 콜론(:)으로 시작한다는 점이다.
let object = {};

// 2.2 함수 정의 표현식
// 함수 정의 표현식은 함수를 정의하며 그 값은 함수이다. 같은 방식으로 함수 리터럴이라고 부를 수도 있다.
// 함수 정의 표현식은 일반적으로 function 키워드로 시작하고 괄호 안에 0개 이상의 식별자(매개변수 이름)을/를 쓴 다음, 중괄호 안에 자바스크립트 코드를 쓰는 형태이다.

// 예시) - 이 함수는 전달받은 값의 제곱을 반환하는 함수이다.
let square = function (value) {
    return value * value;
};

// 2.3 프로퍼티 접근 표현식
// 프로퍼티 접근 표현식은 객체 프로퍼티나 배열 요소의 값으로 평가된다. 자바스크립트에는 두 가지 프로퍼티 접근 문법이 있다.
