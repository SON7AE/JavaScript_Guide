// 5. 배열

// 배열은 값의 순서 있는 집합이다. 각 값을 요소라고 부르며 각 요소에는 배열에서 차지하는 위치를 나타내는 숫자인 인덱스가 있다.
// 자바스크립트 배열에는 타입이 없다.

// 5.1 배열 생성
// 배열을 만드는 방법은 여러가지이다.
// - 배열 리터럴
// - 이터러블 객체의 분해 연산자 ... 적용
// - Array() 생성자
// - Array.of()와 Array.from() 팩토리 메서드

// 5.1.1
// 배열을 만드는 가장 단순한 방법은 배열 리터럴이다.
// 배열 리터럴은 배열 요소를 대활호 안에서 콤마로 구분한 리스트 형태이다.

let empty = []; // 요소가 없는 배열
let primes = [2, 3, 5, 7, 11]; // 숫자 요소가 다섯 개 있는 배열
let misc = [1.1, true, 'A']; // 타입이 다른 요소가 세 개 있고 콤마로 끝난 배열

// 배 열 리터럴에 콤마를 연속해서 썼는데 그 사이에 값이 없으면 성긴 배열이 만들어 진다.
// 값을 생략한 위치에 실제로 배열 요소가 존재하지는 않지만 검색하면 undefined가 반환된다.

let count = [1, , 3]; // 인덱스 0과 2에는 요소가 있지만 1에는 요소가 없다.
let undefs = [, ,]; // 요소가 없지만 길이가 2인 배열

// 배열 리터럴 문법은 마지막에 콤마를 허용하므로 [,,]의 길이는 3이 아니라 2이다.

// 5.1.2
// 분해 연산자
// ES6 이후에는 분해 연산자 ...를 써서 배열 리터럴 안에 다른 배열 요소를 넣을 수 있다.

let a = [1, 2, 3];
let b = [0, ...a, 4];

console.log(b); // b == [0, 1, 2, 3, 4]

// 분해 연산자는 배열을 얕게(shallow) 복사할 때도 유용하다.

let original = [1, 2, 3];
let copy = [...original];
copy[0] = 0; // 사본을 수정해도 원본에는 영향이 없다.
original[0]; //  1;

// 5.1.3 Array() 생성자
// Array() 생성자를 써서 배열을 만들 수도 있다. 이 생성자는 다음과 같이 세 가지 방법으로 호출할 수 있다.
// - 인자 없이 호출
let arr1 = new Array();
// 이 방법은 요소 없는 빈 배열을 생성하며 배열 리터럴 []과 동등하다.

// - 배열 길이를 나타내는 숫자 인자 하나로 호출
let arr2 = new Array(10);
// 이 방법은 지정된 길이를 가진 배열을 생성한다.
// 배열 요소가 몇 개인지 미리 알고 있으면 이런 식으로 Array() 생성자를 사용할 수 있다.

// - 배열 요소를 두 개 이상 쓰거나 숫자가 아닌 요소를 하나만 넘겨 호출
let arr3 = new Array(5, 4, 3, 2, 1, 'testing, testing');
// 이렇게 사용하면 생성자의 인자가 새 배열의 요소가 된다.
// Array() 생성자보다는 배열 리터럴이 거의 항상 더 단순하다.
