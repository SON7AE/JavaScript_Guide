// 3. 문

// 3.1 조건문
// 3.1.1 if
// if문은 자바스크립트가 조건에 따라 문을 실행할 수 있게 하는 기본적인 제어문이다.

if (expresion) statement;

// 첫 번째로 위와 같은 형태에서는 expression(표현식)을 평가한다. 결괏값이 true 같은 값이면 statement(문)을/를 실행한다.
// 결괏값이 false 같은 값이면 statement를 실행하지 않는다.

// 3.1.2 else if
// if/else 문은 표현식을 평가하고 그 결과에 따라 두 코드 중 하나를 실행한다. 하지만 선택지가 여럿이라면 어떻게 해야할까?
// else if 문이 그런 방법 중 하나이다.

if (n === 1) {
    // 코드 블록 #1을 실행한다.
} else if (n === 2) {
    // 코드 블록 #2를 실행한다.
} else if (n === 3) {
    // 코드 블록 #3을 실행한다.
} else {
    // 전부 실패하면 블록 #4를 실행한다.
}

// 3.1.3 switch
// if 문은 프로그램 실행 흐름에 분기점을 만들고, else if를 써서 분기점을 여럿 만들 수 있다.
// 하지만 모든 분기점이 같은 표현식의 값에 좌우된다면 else if가 최선의 선택이 아니다.

switch (n) {
    case 1:
        // 코드 블록 #1을 실행한다.
        break;
    case 2:
        // 코드 블록 #2를 실행한다.
        break;
    case 3:
        // 코드 블록 #3을 실행한다.
        break;
    default:
        // 코드 블록 #4를 실행한다.
        break;
}

// break 문은 인터프리터가 switch 문의 끝으로 빠져나가서 이어지는 문을 실행하게 하는 명령이다.

function convert(x) {
    switch (typeof x) {
        case 'number': // 숫자를 16진수로 변환한다.
            return x.toString(16);
        case 'string': // 문자열을 따옴표로 감싸 반환한다.
            return '"' + x + '"';
        default: // 다른 타입은 일반적인 방법으로 변환한다.
            return String(x);
    }
}

// switch 문은 switch 키워드 다음에 있는 표현식을 가장 먼저 평가하고, 그 다음에는 일치하는 값을 찾을 때까지 case 표현식을 순서대로 평가한다.
// 일치하는 케이스를 찾을 때는 동등 연산자 == 가 아니라 일치 연산자 === 를 사용하므로 표현식은 반드시 타입변환을 거치지 않고 일치해야한다.

// 3.2 for-of 구문
// for-of 구문은 ES6에서 정의한 새 반복문이다.
// for-of 루프는 이터러블(iterable) 객체에서 동작한다. 이터러블이란 간단히 말해 배열, 문자열, 세트, 맵이 이에 해당한다.
// 이들은 for-of 루프로 순회할 수 있는 일종의 연속체 또는 일련의 요소이다.

let data = [1, 2, 3, 4, 5, 6, 7, 8, 9];
let sum = 0;

for (let element of data) {
    sum += element;
}
console.log(sum); // 45

// 3.2.1 for-of와 객체
// 객체는 기본적으로 이터러블이 아니다. 일반적인 객체에 for-of 구문을 사용하려 하면 런타임에 TypeError가 일어난다.

let object = { x: 1, y: 2, z: 3 };
for (let element of object) {
    console.log(element); // object는 이터러블이 아니므로 TypeError가 일어난다.
}

// 객체의 프로퍼티를 순회하고 싶다면 for-in 구문을 사용하거나 Object.keys() 메서드에 for-of를 사용해야한다.
Object.keys(); // 객체의 프로퍼티 이름으로 이루어진 배열을 반환하며 배열은 for-of 구문을 사용할 수 있는 이터러블이다.

// 3.2 for-in 구문
// for-in 구문은 of 키워드가 in으로 바뀐 점을 제외하면 for-of 구문과 거의 비슷하다.
// for-in 루프는 in 다음에 어떤 객체든 쓸 수 있다.

// 3.3 점프문
// 3.3.1 return
// 함수 호출은 표현식이고, 표현식은 모두 값이 있다는 설명을 기억하자.
// return 문은 그 함수 호출의 값을 지정한다. return 문의 문법은 다음과 같아.

return expresion;

// return 문은 함수 바디 안에서만 쓸 수 있다.

// 3.3.2 throw
// 예외(exception)는 예외적인 조건이나 에러가 일어났다는 신호이다.
// 예외를 일으키는 것은 그런 에러나 예외적 조건이 일어났다는 신호를 보내는 것이다.

// 3.3.3 try-catch-finally
// try-catch-finally 구문은 자바스크립트의 예외 처리 메커니즘이다.

// try 절은 처리하려 하는 예외가 담긴 코드 블록이다.
// try 블록 다음에는 catch 절이 있으며, try 블록에서 예외가 일어나면 catch 절이 호출된다.
// catch 절 다음에는 finally 블록이 있다. 이 절은 try 블록에서 무슨 일이 일어났든 관계없이 실행되는 일종의 정리 코드이다.
// catch와 finally 블록은 모두 선택 사항이지만, try 블록 뒤에 둘 중 하나는 반드시 써야 한다.

try {
    // 문제가 없을 경우 일반적으로 이 코드는 블록 위쪽에서
    // 아래쪽으로 실행된다. 하지만 이 코드는 때때로 예외를 일으킬 수 있는데
    // throw 문을 통해 예외를 직접 일으키거나 예외를 일으키는
    // 메서드를 호출해서 간접적으로 일으킨다.
} catch (e) {
    // 이 블록의 문은 try 블록에서 예외를 일으켰을 때만 실행된다.
    // 이 문은 로컬 변수 e를 사용할 수 있으며, 이 변수는
    // Error 객체 또는 전달받은 값을 참조한다.
    // 이 블록은 예외를 처리할 수도 있고,
    // 아무 일도 하지 않고 무시할 수도 있으며,
    // throw를 통해 다시 예외를 일으킬 수도 있다.
} finally {
    // 이 블록은 try 블록에서 무슨 일이 있었든 항상 실행된다.
    // 경우의 수는 다음과 같다.
    // - 정상적으로 try 블록의 끝에 도달한 경우
    // - break, continue, return 문을 통해 try 블록을 빠져나가는 경우
    // - 위 catch 절에서 처리한 예외 때문에 try 블록이 종료된 경우
    // - 예외가 캐치되지 않고 계속 전파되는 경우
}
